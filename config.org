#+TITLE: Config
#+STARTUP: content
* Base
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Ian Davids"
      user-mail-address "ian@algoriststudios.com")
#+end_src

* Platform Helper Macro Loading
These helper macros let me detect if we are running on Termux or windows or mac.
For termux we need a different init.el which I haven't solved yet.

#+begin_src emacs-lisp
(setq id/is-termux
      (string-suffix-p "Android" (string-trim (shell-command-to-string "uname -a"))))

;; Platform helper macros
(load! "helpers.el")
#+end_src

* Display DPI
#+BEGIN_SRC emacs-lisp
(setq dpi  (/ (display-pixel-width) (/ (display-mm-width) 25.4)))
(setq k-high-dpi 95)
#+END_SRC

* Core Settings
 Doom exposes five (optional) variables for controlling fonts in Doom. Here
 are the three important ones:

 + `doom-font'
 + `doom-variable-pitch-font'
 + `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.

 They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
 font string. You generally only need these two:

#+begin_src emacs-lisp
(if (< dpi k-high-dpi)
    (message "Low DPI")
    (message "High DPI")
)
(if (< dpi k-high-dpi)
    (setq doom-font (font-spec :family "Fira Code" :size 18))
    (setq doom-font (font-spec :family "Fira Code" :size 26))
)
(if (< dpi k-high-dpi)
    (setq doom-variable-pitch-font (font-spec :family "sans" :size 18))
    (setq doom-variable-pitch-font (font-spec :family "sans" :size 26))
)

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;;(setq doom-theme 'doom-one)
(setq doom-theme 'doom-palenight)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

* Spaces Instead of Tabs

Why would I want tabs? They make development in python a pain!

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

* Alert
Alert comes from: I am not sure if I have this configured properly
[[https://github.com/daviwil/dotfiles/blob/master/Emacs.org][Systems Crafters]]

#+begin_src emacs-lisp
(use-package alert
  :commands alert
  :config
  (setq alert-default-style 'notifications))
#+end_src

* Org Directory

Set our org-mode directory path and gives us some quick search functionality for our notes directory
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

#+begin_src emacs-lisp
(setq org-directory "/mnt/c/Users/ihdav/notes/")
(defun id/search-org-files ()
  (interactive)
  (counsel-rg "" org-directory nil "Search Notes: "))
#+end_src

* Org Bullets
Org Mode Bullets Lists for Headings
#+begin_src emacs-lisp
(setq
    org-superstar-headline-bullets-list '("⁖" "◉" "○" "✸" "✿")
)
#+end_src

* Org Source Block Snippets

This gives you the ability to add <sh to start a bash source block etc

#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("ps" . "src powershell"))
(add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))
#+end_src

* Org Emphasis Markers

This package makes it much easier to edit Org documents when org-hide-emphasis-markers is turned on. It temporarily shows the emphasis markers around certain markup elements when you place your cursor inside of them. No more fumbling around with = and * characters!

I need to understand what this means!

#+begin_src emacs-lisp
;(setq org-hide-emphasis-markers t)
;(use-package org-appear
;  :hook (org-mode . org-appear-mode))
#+end_src

* Org Ellipsis
#+begin_src emacs-lisp
;;(setq org-ellipsis "⤵")
(setq org-ellipsis " ▾")
#+end_src

* Org Fonts

#+begin_src emacs-lisp
;; Replace list hyphen with dot
(after! org


(font-lock-add-keywords 'org-mode
                         '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
;; Increase the size of various headings
(set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)
(dolist (face '((org-level-1 . 1.4)
                (org-level-2 . 1.2)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))

;; Make sure org-indent face is available
(require 'org-indent)

;; Ensure that anything that should be fixed-pitch in Org files appears that way
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

;; Get rid of the background on column views
(set-face-attribute 'org-column nil :background nil)
(set-face-attribute 'org-column-title nil :background nil)

;; TODO: Others to consider
;; '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
;; '(org-property-value ((t (:inherit fixed-pitch))) t)
;; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
;; '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
;; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
;; '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
)
#+end_src

* Ivy PosFrame
#+BEGIN_SRC emacs-lisp
(after! ivy-posframe
  ;; Causes open buffers and recentf to be combined in ivy-switch-buffer
  (setq ivy-use-virtual-buffers t
        counsel-find-file-at-point t
        ivy-wrap nil
        ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center))
        ivy-posframe-height-alist '((t . 21))
        ivy-posframe-parameters '((internal-border-width . 1))
        ivy-posframe-width 200
    )
)
#+END_SRC

* EShell
This binds Alt + r to a history popup using counsel.

Also provide some aliases for eshell

#+begin_src emacs-lisp
(after! eshell
  (add-hook 'eshell-mode-hook
            (lambda ()
              (eshell-cmpl-initialize)
              (define-key eshell-mode-map (kbd "M-r") 'counsel-esh-history)))
)

;; emacs/eshell
(after! eshell
  (set-eshell-alias!
   "f"   "(other-window 1) && find-file $1"
   "l"   "ls -lh"
   "d"   "dired $1"
   "gl"  "(call-interactively 'magit-log-current)"
   "gs"  "magit-status"
   "gc"  "magit-commit"))
#+END_SRC

* RipGrep (Search Project)

This is a windows only thing, I will remove this now that I am running in WSL.
On windows this rg project command would fail due to slashes.

#+BEGIN_SRC emacs-lisp
;; On windows I get errors because of slashes
(after! counsel
  (with-windows
    (setq counsel-rg-base-command '("rg" "-M" "240" "--with-filename" "--no-heading" "--line-number" "--color" "never" "%s" "--path-separator" "\\" "."))
  )
)
#+END_SRC

* Transparency
Make the window somewhat transparent. I like this sometimes.

#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(100 . 95))
(add-to-list 'default-frame-alist '(alpha . (100 . 95)))
#+END_SRC

* Keybinds
#+BEGIN_SRC emacs-lisp
; Quick jump to anywhere in my buffer
(map!
 (:leader
   (:desc "Search" "d" #'avy-goto-char)
 )
)
#+END_SRC

* Doom Modeline
At Roblox I have crazy big branch names, expand the VC segment of the modeline to reflect that:
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq doom-modeline-vcs-max-length 50))
#+END_SRC


* Golden Ratio
Golden Ratio is a must have. I am a screen realty hog. The window I am in should be biggest
ALWAYS!
#+BEGIN_SRC emacs-lisp
(use-package! golden-ratio
  :after-call pre-command-hook
  :config
  ;(golden-ratio-mode +1)
  ;; Using this hook for resizing windows is less precise than
  ;; `doom-switch-window-hook'.
  (remove-hook 'window-configuration-change-hook #'golden-ratio)
  (add-hook 'doom-switch-window-hook #'golden-ratio))
#+END_SRC

* Clang Format
#+BEGIN_SRC emacs-lisp
(use-package! clang-format)

(defun clang-format-buffer-smart ()
  "Reformat buffer if .clang-format exists in the projectile root."
  (interactive)
  (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
    (clang-format-buffer)))

(defun clang-format-buffer-smart-on-save ()
  "Add auto-save hook for clang-format-buffer-smart."
  (add-hook 'before-save-hook 'clang-format-buffer-smart nil t))

 (add-hook! 'c++-mode-hook 'clang-format-buffer-smart-on-save)
 (add-hook! 'c-mode-hook 'clang-format-buffer-smart-on-save)
#+END_SRC

* LSP Clang Arguments

You can use --query-driver=path/mygcc

#+begin_src emacs-lisp
(setq lsp-clients-clangd-args '("-log=verbose" "-background-index=1"))
#(setq lsp-clients-clangd-executable "")
#+end_src


* Platform Specific Build Config
#+BEGIN_SRC emacs-lisp
(load! "platform-specific.el")
#+END_SRC
